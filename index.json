{
  "api/MackySoft.XPool.Collections.ArrayPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPool-1.html",
    "title": "Class ArrayPool<T> | XPool",
    "keywords": "Class ArrayPool<T> Inheritance Object ArrayPool<T> Implements IPool <T[]> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class ArrayPool<T> : IPool<T[]> Type Parameters Name Description T Constructors ArrayPool() Declaration public ArrayPool() Fields Shared Declaration public static readonly ArrayPool<T> Shared Field Value Type Description ArrayPool <T> Methods ReleaseInstances(Int32) Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Rent(Int32) The array length is not always accurate. Declaration public T[] Rent(int minimumLength) Parameters Type Name Description Int32 minimumLength Returns Type Description T[] Return(T[]) Return the array to the pool. The length of the array must be greater than or equal to 8 and a power of 2. Declaration public void Return(T[] array) Parameters Type Name Description T[] array The length of the array must be greater than or equal to 8 and a power of 2. Return(T[], Boolean) Return the array to the pool. The length of the array must be greater than or equal to 8 and a power of 2. Declaration public void Return(T[] array, bool clearArray = false) Parameters Type Name Description T[] array The length of the array must be greater than or equal to 8 and a power of 2. Boolean clearArray Return(ref T[], Boolean) Return the array to the pool and set array reference to null. The length of the array must be greater than or equal to 8 and a power of 2. Declaration public void Return(ref T[] array, bool clearArray = false) Parameters Type Name Description T[] array The length of the array must be greater than or equal to 8 and a power of 2. Boolean clearArray Explicit Interface Implementations IPool<T[]>.Capacity Declaration int IPool<T[]>.Capacity { get; } Returns Type Description Int32 IPool<T[]>.Count Declaration int IPool<T[]>.Count { get; } Returns Type Description Int32 IPool<T[]>.Rent() Declaration T[] IPool<T[]>.Rent() Returns Type Description T[] Implements IPool<T>"
  },
  "api/MackySoft.XPool.Collections.ArrayPoolExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPoolExtensions.html",
    "title": "Class ArrayPoolExtensions | XPool",
    "keywords": "Class ArrayPoolExtensions Inheritance Object ArrayPoolExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class ArrayPoolExtensions Methods ToArrayFromPool<T>(IEnumerable<T>) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, ArrayPool<T>) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, ArrayPool<T>, out Int32) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, ArrayPool<T> pool, out int count) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Int32 count Number of elements in source. Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, out Int32) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, out int count) Parameters Type Name Description IEnumerable <T> source Int32 count Number of elements in source. Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.ArrayPoolUtility.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPoolUtility.html",
    "title": "Class ArrayPoolUtility | XPool",
    "keywords": "Class ArrayPoolUtility Inheritance Object ArrayPoolUtility Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class ArrayPoolUtility Fields kMinArraySize Declaration public const int kMinArraySize = 8 Field Value Type Description Int32 Methods EnsureCapacity<T>(ref T[], Int32, ArrayPool<T>) Declaration public static void EnsureCapacity<T>(ref T[] array, int newSize, ArrayPool<T> pool) Parameters Type Name Description T[] array Int32 newSize ArrayPool <T> pool Type Parameters Name Description T EnsureCapacityCircular<T>(ref T[], Int32, Int32, ref Int32, ref Int32, ArrayPool<T>) Declaration public static bool EnsureCapacityCircular<T>(ref T[] array, int count, int newSize, ref int first, ref int last, ArrayPool<T> pool) Parameters Type Name Description T[] array Int32 count Int32 newSize Int32 first Int32 last ArrayPool <T> pool Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.CollectionPoolUtility.html": {
    "href": "api/MackySoft.XPool.Collections.CollectionPoolUtility.html",
    "title": "Class CollectionPoolUtility | XPool",
    "keywords": "Class CollectionPoolUtility Inheritance Object CollectionPoolUtility Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class CollectionPoolUtility Fields kDefaultCapacity The default capacity of collection pool. This is used by ListPool<T> and others. Declaration public const int kDefaultCapacity = 8 Field Value Type Description Int32"
  },
  "api/MackySoft.XPool.Collections.DictionaryPool-2.html": {
    "href": "api/MackySoft.XPool.Collections.DictionaryPool-2.html",
    "title": "Class DictionaryPool<TKey, TValue> | XPool",
    "keywords": "Class DictionaryPool<TKey, TValue> Inheritance Object DictionaryPool<TKey, TValue> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class DictionaryPool<TKey, TValue> : CollectionPoolBase<Dictionary<TKey, TValue>> Type Parameters Name Description TKey TValue Constructors DictionaryPool() Declaration public DictionaryPool() Fields Shared Declaration public static readonly DictionaryPool<TKey, TValue> Shared Field Value Type Description DictionaryPool <TKey, TValue>"
  },
  "api/MackySoft.XPool.Collections.HashSetPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.HashSetPool-1.html",
    "title": "Class HashSetPool<T> | XPool",
    "keywords": "Class HashSetPool<T> Inheritance Object HashSetPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class HashSetPool<T> : CollectionPoolBase<HashSet<T>> Type Parameters Name Description T Constructors HashSetPool() Declaration public HashSetPool() Fields Shared Declaration public static readonly HashSetPool<T> Shared Field Value Type Description HashSetPool <T>"
  },
  "api/MackySoft.XPool.Collections.html": {
    "href": "api/MackySoft.XPool.Collections.html",
    "title": "Namespace MackySoft.XPool.Collections | XPool",
    "keywords": "Namespace MackySoft.XPool.Collections Classes ArrayPool<T> ArrayPoolExtensions ArrayPoolUtility CollectionPoolUtility DictionaryPool<TKey, TValue> HashSetPool<T> ListPool<T> QueuePool<T> StackPool<T> TemporaryArrayExtensions TemporaryListExtensions Structs TemporaryArray<T> Temporary array without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal array. After using it, please call the Dispose(). TemporaryList<T> Temporary list without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal list. After using it, please call the Dispose(). TemporaryQueue<T> Temporary queue without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal queue. After using it, please call the Dispose(). TemporaryStack<T>"
  },
  "api/MackySoft.XPool.Collections.ListPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.ListPool-1.html",
    "title": "Class ListPool<T> | XPool",
    "keywords": "Class ListPool<T> Inheritance Object ListPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class ListPool<T> : CollectionPoolBase<List<T>> Type Parameters Name Description T Constructors ListPool() Declaration public ListPool() Fields Shared Declaration public static readonly ListPool<T> Shared Field Value Type Description ListPool <T>"
  },
  "api/MackySoft.XPool.Collections.ObjectModel.CollectionPoolBase-1.html": {
    "href": "api/MackySoft.XPool.Collections.ObjectModel.CollectionPoolBase-1.html",
    "title": "Class CollectionPoolBase<T> | XPool",
    "keywords": "Class CollectionPoolBase<T> Base of pool for collections. Inheritance Object CollectionPoolBase<T> Implements IPool <T> Namespace : MackySoft.XPool.Collections.ObjectModel Assembly : cs.temp.dll.dll Syntax public abstract class CollectionPoolBase<T> : IPool<T> where T : class Type Parameters Name Description T Constructors CollectionPoolBase(Int32, Func<T>, Action<T>) Constructor to initialize a collection pool. You must call this in the constructor of the inherited class. Declaration protected CollectionPoolBase(int capacity, Func<T> factory, Action<T> clear) Parameters Type Name Description Int32 capacity The pool capacity. If less than 0, will be thrown. Func <T> factory Method that create new instance. If is null, will be thrown. Action <T> clear Method that clear collection. If is null, will be thrown. Properties Capacity Declaration public int Capacity { get; } Property Value Type Description Int32 Count Declaration public int Count { get; } Property Value Type Description Int32 Methods ReleaseInstances(Int32) Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Rent() Declaration public T Rent() Returns Type Description T Return(T) Declaration public void Return(T collection) Parameters Type Name Description T collection Implements IPool<T>"
  },
  "api/MackySoft.XPool.Collections.ObjectModel.html": {
    "href": "api/MackySoft.XPool.Collections.ObjectModel.html",
    "title": "Namespace MackySoft.XPool.Collections.ObjectModel | XPool",
    "keywords": "Namespace MackySoft.XPool.Collections.ObjectModel Classes CollectionPoolBase<T> Base of pool for collections."
  },
  "api/MackySoft.XPool.Collections.QueuePool-1.html": {
    "href": "api/MackySoft.XPool.Collections.QueuePool-1.html",
    "title": "Class QueuePool<T> | XPool",
    "keywords": "Class QueuePool<T> Inheritance Object QueuePool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class QueuePool<T> : CollectionPoolBase<Queue<T>> Type Parameters Name Description T Constructors QueuePool() Declaration public QueuePool() Fields Shared Declaration public static readonly QueuePool<T> Shared Field Value Type Description QueuePool <T>"
  },
  "api/MackySoft.XPool.Collections.StackPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.StackPool-1.html",
    "title": "Class StackPool<T> | XPool",
    "keywords": "Class StackPool<T> Inheritance Object StackPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class StackPool<T> : CollectionPoolBase<Stack<T>> Type Parameters Name Description T Constructors StackPool() Declaration public StackPool() Fields Shared Declaration public static readonly StackPool<T> Shared Field Value Type Description StackPool <T>"
  },
  "api/MackySoft.XPool.Collections.TemporaryArray-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryArray-1.html",
    "title": "Struct TemporaryArray<T> | XPool",
    "keywords": "Struct TemporaryArray<T> Temporary array without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal array. After using it, please call the Dispose(). Implements IDisposable Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryArray<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors TemporaryArray(ArrayPool<T>, Int32) Declaration public TemporaryArray(ArrayPool<T> pool, int length) Parameters Type Name Description ArrayPool <T> pool Int32 length Properties Array Internal array. The length of internal array is always greater than or equal to Length property. Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Length of internal array. Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Length Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods Create(Int32) Create a temporary array of the specified length. Declaration public static TemporaryArray<T> Create(int length) Parameters Type Name Description Int32 length Returns Type Description TemporaryArray <T> Create(Int32, ArrayPool<T>) Create a temporary array of the specified length. Declaration public static TemporaryArray<T> Create(int length, ArrayPool<T> pool) Parameters Type Name Description Int32 length ArrayPool <T> pool Returns Type Description TemporaryArray <T> Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray From(TemporaryArray<T>) Create a temporary array from the elements of TemporaryArray<T> . Declaration public static TemporaryArray<T> From(TemporaryArray<T> source) Parameters Type Name Description TemporaryArray <T> source Returns Type Description TemporaryArray <T> From(TemporaryArray<T>, ArrayPool<T>) Create a temporary array from the elements of TemporaryArray<T> . Declaration public static TemporaryArray<T> From(TemporaryArray<T> source, ArrayPool<T> pool) Parameters Type Name Description TemporaryArray <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> From(IEnumerable<T>) Create a temporary array from the elements of IEnumerable<T> . Declaration public static TemporaryArray<T> From(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryArray <T> From(IEnumerable<T>, ArrayPool<T>) Create a temporary array from the elements of IEnumerable<T> . Declaration public static TemporaryArray<T> From(IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Implements IDisposable"
  },
  "api/MackySoft.XPool.Collections.TemporaryArrayExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryArrayExtensions.html",
    "title": "Class TemporaryArrayExtensions | XPool",
    "keywords": "Class TemporaryArrayExtensions Inheritance Object TemporaryArrayExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class TemporaryArrayExtensions Methods ToTemporaryArray<T>(IEnumerable<T>) Create a temporary array from the elements of IEnumerable<T> . Declaration public static TemporaryArray<T> ToTemporaryArray<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryArray <T> Type Parameters Name Description T ToTemporaryArray<T>(IEnumerable<T>, ArrayPool<T>) Create a temporary array from the elements of IEnumerable<T> . Declaration public static TemporaryArray<T> ToTemporaryArray<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.TemporaryList-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryList-1.html",
    "title": "Struct TemporaryList<T> | XPool",
    "keywords": "Struct TemporaryList<T> Temporary list without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal list. After using it, please call the Dispose(). Implements IDisposable Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors TemporaryList(ArrayPool<T>, Int32) Declaration public TemporaryList(ArrayPool<T> pool, int minimumCapacity) Parameters Type Name Description ArrayPool <T> pool Int32 minimumCapacity Properties Array Internal array. The length of internal array is always greater than or equal to property. Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Length of internal array. Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Count Declaration public readonly int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Add(T) Add object to the head of the list. Declaration public void Add(T item) Parameters Type Name Description T item AddRange(IEnumerable<T>) Add elements of specified collection to the head of the list. Declaration public void AddRange(IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection BinarySearch(T) Search a sorted list using the default comparer and return the index starting from 0 for that element. Declaration public int BinarySearch(T item) Parameters Type Name Description T item Returns Type Description Int32 BinarySearch(T, IComparer<T>) Search in the sorted list within specified range from specified index, using the specified comparer and return the index starting from 0 for that element. Declaration public int BinarySearch(T item, IComparer<T> comparer) Parameters Type Name Description T item IComparer <T> comparer Returns Type Description Int32 BinarySearch(Int32, Int32, T, IComparer<T>) Search a sorted list using the specified comparer and return the index starting from 0 for that element. Declaration public int BinarySearch(int index, int count, T item, IComparer<T> comparer) Parameters Type Name Description Int32 index Int32 count T item IComparer <T> comparer Returns Type Description Int32 Clear() Remove all objects from the list. Declaration public void Clear() Contains(T) Whether the specified object exists in the list. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[]) Copy objects to array in the list. Declaration public void CopyTo(T[] array) Parameters Type Name Description T[] array CopyTo(T[], Int32) Copy objects to array in the list. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex CopyTo(Int32, T[], Int32, Int32) Copy objects to array in the list. Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index T[] array Int32 arrayIndex Int32 count Create() Create an empty temporay list using Shared . Declaration public static TemporaryList<T> Create() Returns Type Description TemporaryList <T> Create(ArrayPool<T>) Create an empty temporay list. Declaration public static TemporaryList<T> Create(ArrayPool<T> pool) Parameters Type Name Description ArrayPool <T> pool Returns Type Description TemporaryList <T> Create(Int32) Create an empty temporary list with the specified initial capacity. Declaration public static TemporaryList<T> Create(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity Returns Type Description TemporaryList <T> Create(Int32, ArrayPool<T>) Create an empty temporary list with the specified initial capacity. Declaration public static TemporaryList<T> Create(int minimumCapacity, ArrayPool<T> pool) Parameters Type Name Description Int32 minimumCapacity ArrayPool <T> pool Returns Type Description TemporaryList <T> Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray Exists(Predicate<T>) Whether the object matching the specified condition exists in the list. Declaration public bool Exists(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Boolean Find(Predicate<T>) Search in the list with specified condition and return the first matching element. Declaration public T Find(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T FindAll(Predicate<T>) Return a collection of objects in a list that match the specified condition. Declaration public TemporaryList<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description TemporaryList <T> FindIndex(Predicate<T>) Search in the list with specified condition and return the index of the first matching element. Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 FindIndex(Int32, Predicate<T>) Search in the list at between specified index and the tail with specified condition, and return the index of the first matching element. Declaration public int FindIndex(int startIndex, Predicate<T> match) Parameters Type Name Description Int32 startIndex Predicate <T> match Returns Type Description Int32 FindIndex(Int32, Int32, Predicate<T>) Search in the list within specified range from specified index with specified condition, and return the index of the first matching element. Declaration public int FindIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description Int32 startIndex Int32 count Predicate <T> match Returns Type Description Int32 FindLast(Predicate<T>) Search in the list with specified condition and return the last matching element. Declaration public T FindLast(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T FindLastIndex(Predicate<T>) Search in the list with specified condition and return the index of the last matching element. Declaration public int FindLastIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 FindLastIndex(Int32, Predicate<T>) Search in the list at between specified index and the tail with specified condition, and return the index of the last matching element. Declaration public int FindLastIndex(int startIndex, Predicate<T> match) Parameters Type Name Description Int32 startIndex Predicate <T> match Returns Type Description Int32 FindLastIndex(Int32, Int32, Predicate<T>) Search in the list within specified range from specified index with specified condition, and return the index of the last matching element. Declaration public int FindLastIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description Int32 startIndex Int32 count Predicate <T> match Returns Type Description Int32 From(IEnumerable<T>) Create a temporary list from the elements of IEnumerable<T> using Shared . Declaration public static TemporaryList<T> From(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryList <T> From(IEnumerable<T>, ArrayPool<T>) Create a temporary list from the elements of IEnumerable<T> . Declaration public static TemporaryList<T> From(IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryList <T> GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IndexOf(T) Search for specified object in the list and return the index of the first matching element. Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 IndexOf(T, Int32) Search for specified object in the list at between specified index and the tail, and return the index of the first matching element. Declaration public int IndexOf(T item, int index) Parameters Type Name Description T item Int32 index Returns Type Description Int32 IndexOf(T, Int32, Int32) Search for specified object in the list within specified range from specified index, and return the index of the first matching element. Declaration public int IndexOf(T item, int index, int count) Parameters Type Name Description T item Int32 index Int32 count Returns Type Description Int32 Insert(Int32, T) Insert object at the specified index in the list. Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item InsertRange(Int32, IEnumerable<T>) Insert elements of specified collection to the specified index in the list. Declaration public void InsertRange(int index, IEnumerable<T> collection) Parameters Type Name Description Int32 index IEnumerable <T> collection LastIndexOf(T) Search for specified object in the list and return the index of the last matching element. Declaration public int LastIndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 LastIndexOf(T, Int32) Search for specified object in the list at between specified index and the tail, and return the index of the last matching element. Declaration public int LastIndexOf(T item, int index) Parameters Type Name Description T item Int32 index Returns Type Description Int32 LastIndexOf(T, Int32, Int32) Search for specified object in the list within specified range from specified index, and return the index of the first matching element. Declaration public int LastIndexOf(T item, int index, int count) Parameters Type Name Description T item Int32 index Int32 count Returns Type Description Int32 Remove(T) Remove the first matching element when the specified object exists in the list. Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean RemoveAll(Predicate<T>) Remove all objects from the list that match the speficied condition. Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 RemoveAt(Int32) Remove object at the specified index in the list. Declaration public bool RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean RemoveRange(Int32, Int32) Remove objects in the list within specified range from specified index. Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index Int32 count Reverse() Reverse the order of the elements in the list. Declaration public void Reverse() Reverse(Int32, Int32) Reverse the order of the elements in the list. Declaration public void Reverse(int index, int count) Parameters Type Name Description Int32 index Int32 count Sort() Sort the elements of the list using the default comparer. Declaration public void Sort() Sort(IComparer<T>) Sort the elements of the list using the specified comparer. Declaration public void Sort(IComparer<T> comparer) Parameters Type Name Description IComparer <T> comparer Sort(Int32, Int32, IComparer<T>) Sort the elements of the list using the specified comparer. Declaration public void Sort(int index, int count, IComparer<T> comparer) Parameters Type Name Description Int32 index Int32 count IComparer <T> comparer TrueForAll(Predicate<T>) Whether all objects in the list match the specified condition. Declaration public bool TrueForAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Boolean Implements IDisposable"
  },
  "api/MackySoft.XPool.Collections.TemporaryListExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryListExtensions.html",
    "title": "Class TemporaryListExtensions | XPool",
    "keywords": "Class TemporaryListExtensions Inheritance Object TemporaryListExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class TemporaryListExtensions Methods ToTemporaryList<T>(IEnumerable<T>) Create a temporary list from the elements of IEnumerable<T> . Declaration public static TemporaryList<T> ToTemporaryList<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryList <T> Type Parameters Name Description T ToTemporaryList<T>(IEnumerable<T>, ArrayPool<T>) Create a temporary list from the elements of IEnumerable<T> using Shared . Declaration public static TemporaryList<T> ToTemporaryList<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryList <T> Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.TemporaryQueue-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryQueue-1.html",
    "title": "Struct TemporaryQueue<T> | XPool",
    "keywords": "Struct TemporaryQueue<T> Temporary queue without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal queue. After using it, please call the Dispose(). Implements IDisposable Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryQueue<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors TemporaryQueue(ArrayPool<T>, Int32) Declaration public TemporaryQueue(ArrayPool<T> pool, int minimumCapacity) Parameters Type Name Description ArrayPool <T> pool Int32 minimumCapacity Properties Array Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Count Declaration public readonly int Count { get; } Property Value Type Description Int32 Methods Clear() Remove all objects from the queue. Declaration public void Clear() Contains(T) Whether the specified object exists in the queue. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Copy objects to array in the queue. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex Create<T>() Create an empty temporay queue using Shared . Declaration public static TemporaryQueue<T> Create<T>() Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Create<T>(ArrayPool<T>) Create an empty temporay queue. Declaration public static TemporaryQueue<T> Create<T>(ArrayPool<T> pool) Parameters Type Name Description ArrayPool <T> pool Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Create<T>(Int32) Create an empty temporary queue with the specified initial capacity. Declaration public static TemporaryQueue<T> Create<T>(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Create<T>(Int32, ArrayPool<T>) Create an empty temporary queue with the specified initial capacity. Declaration public static TemporaryQueue<T> Create<T>(int minimumCapacity, ArrayPool<T> pool) Parameters Type Name Description Int32 minimumCapacity ArrayPool <T> pool Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Dequeue() Remove object at the head of the queue and returns it. If the queue is empty, will be thrown. Declaration public T Dequeue() Returns Type Description T Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray Enqueue(T) Add object to the tail of the queue. Declaration public void Enqueue(T item) Parameters Type Name Description T item Object to add to the queue. GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Peek() Return object at the head of the queue. If the queue is empty, will be thrown. Declaration public T Peek() Returns Type Description T Implements IDisposable"
  },
  "api/MackySoft.XPool.Collections.TemporaryStack-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryStack-1.html",
    "title": "Struct TemporaryStack<T> | XPool",
    "keywords": "Struct TemporaryStack<T> Implements IDisposable Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryStack<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors TemporaryStack(ArrayPool<T>, Int32) Declaration public TemporaryStack(ArrayPool<T> pool, int minimumCapacity) Parameters Type Name Description ArrayPool <T> pool Int32 minimumCapacity Properties Array Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Count Declaration public readonly int Count { get; } Property Value Type Description Int32 Methods Clear() Remove all objects from the stack. Declaration public void Clear() Contains(T) Whether the specified object exists in the stack. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Copy objects to array in the stack. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex Create<T>() Create an empty temporay stack using Shared . Declaration public static TemporaryStack<T> Create<T>() Returns Type Description TemporaryStack <T> Type Parameters Name Description T Create<T>(ArrayPool<T>) Create an empty temporay stack. Declaration public static TemporaryStack<T> Create<T>(ArrayPool<T> pool) Parameters Type Name Description ArrayPool <T> pool Returns Type Description TemporaryStack <T> Type Parameters Name Description T Create<T>(Int32) Create an empty temporary stack with the specified initial capacity. Declaration public static TemporaryStack<T> Create<T>(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity Returns Type Description TemporaryStack <T> Type Parameters Name Description T Create<T>(Int32, ArrayPool<T>) Create an empty temporary stack with the specified initial capacity. Declaration public static TemporaryStack<T> Create<T>(int minimumCapacity, ArrayPool<T> pool) Parameters Type Name Description Int32 minimumCapacity ArrayPool <T> pool Returns Type Description TemporaryStack <T> Type Parameters Name Description T Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Peek() Return object at the head of the stack. If the stack is empty, will be thrown. Declaration public T Peek() Returns Type Description T Pop() Remove object at the head of the stack and returns it. If the stack is empty, will be thrown. Declaration public T Pop() Returns Type Description T Push(T) Add object to the head of the stack. Declaration public void Push(T item) Parameters Type Name Description T item Object to add to the stack. Implements IDisposable"
  },
  "api/MackySoft.XPool.Collections.Tests.ArrayPoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.ArrayPoolTest.html",
    "title": "Class ArrayPoolTest | XPool",
    "keywords": "Class ArrayPoolTest Inheritance Object ArrayPoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class ArrayPoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate() Return_empty_array_if_required_size_is_zero() Declaration public void Return_empty_array_if_required_size_is_zero() Return_minimum_size_array_if_required_size_less_than_minimum_array_size() Declaration public void Return_minimum_size_array_if_required_size_less_than_minimum_array_size() Returned_array_size_is_next_power_of_two(Int32) Declaration public void Returned_array_size_is_next_power_of_two(int powerOfTwoSize) Parameters Type Name Description Int32 powerOfTwoSize Throw_if_required_size_is_negative() Declaration public void Throw_if_required_size_is_negative()"
  },
  "api/MackySoft.XPool.Collections.Tests.CollectionPoolBaseTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.CollectionPoolBaseTest.html",
    "title": "Class CollectionPoolBaseTest | XPool",
    "keywords": "Class CollectionPoolBaseTest Inheritance Object CollectionPoolBaseTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class CollectionPoolBaseTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate()"
  },
  "api/MackySoft.XPool.Collections.Tests.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.html",
    "title": "Namespace MackySoft.XPool.Collections.Tests | XPool",
    "keywords": "Namespace MackySoft.XPool.Collections.Tests Classes ArrayPoolTest CollectionPoolBaseTest TemporaryArrayTest TemporaryListTest TemporaryQueueTest TemporaryStackTest"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryArrayTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryArrayTest.html",
    "title": "Class TemporaryArrayTest | XPool",
    "keywords": "Class TemporaryArrayTest Inheritance Object TemporaryArrayTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryArrayTest Methods Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Create_method_return_expected_array() Declaration public void Create_method_return_expected_array() Init() Declaration public void Init() Same_as_copied_collection() Declaration public void Same_as_copied_collection() Same_as_copied_temporary_array() Declaration public void Same_as_copied_temporary_array()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryListTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryListTest.html",
    "title": "Class TemporaryListTest | XPool",
    "keywords": "Class TemporaryListTest Inheritance Object TemporaryListTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryListTest Methods Add_does_not_allocate() Declaration public void Add_does_not_allocate() Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Create_method_return_expected_list() Declaration public void Create_method_return_expected_list() Init() Declaration public void Init() Same_as_copied_collection() Declaration public void Same_as_copied_collection()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryQueueTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryQueueTest.html",
    "title": "Class TemporaryQueueTest | XPool",
    "keywords": "Class TemporaryQueueTest Inheritance Object TemporaryQueueTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryQueueTest Methods Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Clear_succeeded() Declaration public void Clear_succeeded() Create_method_return_expected_queue() Declaration public void Create_method_return_expected_queue() Dequeue_succeeded() Declaration public void Dequeue_succeeded() Enqueue_succeeded() Declaration public void Enqueue_succeeded() Init() Declaration public void Init() Same_as_copied_array() Declaration public void Same_as_copied_array()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryStackTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryStackTest.html",
    "title": "Class TemporaryStackTest | XPool",
    "keywords": "Class TemporaryStackTest Inheritance Object TemporaryStackTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryStackTest Methods Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Clear_succeeded() Declaration public void Clear_succeeded() Create_method_return_expected_stack() Declaration public void Create_method_return_expected_stack() Init() Declaration public void Init() Pop_and_Peek_throw_InvalidOperartionException_if_stack_is_empty() Declaration public void Pop_and_Peek_throw_InvalidOperartionException_if_stack_is_empty() Pop_succeeded() Declaration public void Pop_succeeded() Push_succeeded() Declaration public void Push_succeeded() Same_as_copied_array() Declaration public void Same_as_copied_array()"
  },
  "api/MackySoft.XPool.FactoryPool-1.html": {
    "href": "api/MackySoft.XPool.FactoryPool-1.html",
    "title": "Class FactoryPool<T> | XPool",
    "keywords": "Class FactoryPool<T> Pool that create an instance from a custom factory method. Inheritance Object FactoryPool<T> Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public sealed class FactoryPool<T> : PoolBase<T> Type Parameters Name Description T Constructors FactoryPool(Int32, Func<T>, Action<T>, Action<T>, Action<T>) Declaration public FactoryPool(int capacity, Func<T> factory, Action<T> onRent = null, Action<T> onReturn = null, Action<T> onRelease = null) Parameters Type Name Description Int32 capacity The pool capacity. If less than or equal to 0, will be thrown. Func <T> factory Method that create new instance. If is null, will be thrown. This method is must return not null. If returns null, throw . Action <T> onRent Callback that is called when is successful. Action <T> onReturn Callback that is called when is successful. Action <T> onRelease Callback that is called when capacity is exceeded and the instance cannot be returned to the pool. Methods Factory() Declaration protected override T Factory() Returns Type Description T OnRelease(T) Declaration protected override void OnRelease(T instance) Parameters Type Name Description T instance OnRent(T) Declaration protected override void OnRent(T instance) Parameters Type Name Description T instance OnReturn(T) Declaration protected override void OnReturn(T instance) Parameters Type Name Description T instance"
  },
  "api/MackySoft.XPool.html": {
    "href": "api/MackySoft.XPool.html",
    "title": "Namespace MackySoft.XPool | XPool",
    "keywords": "Namespace MackySoft.XPool Classes FactoryPool<T> Pool that create an instance from a custom factory method. PoolExtensions Structs RentInstance<T> This is a token that indicates that rented an instance from the pool. You can return an instance to the pool by calling Dispose() . See: RentTemporary<T>(IPool<T>, out T) Interfaces IPool<T> Interface provides that basic features of pool."
  },
  "api/MackySoft.XPool.IPool-1.html": {
    "href": "api/MackySoft.XPool.IPool-1.html",
    "title": "Interface IPool<T> | XPool",
    "keywords": "Interface IPool<T> Interface provides that basic features of pool. Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public interface IPool<T> Type Parameters Name Description T Type of instance to pool. Properties Capacity Capacity to store instances in the pool. Declaration int Capacity { get; } Property Value Type Description Int32 Count Quantity of instances stored in the pool. Declaration int Count { get; } Property Value Type Description Int32 Methods ReleaseInstances(Int32) Keeps the specified quantity and releases the pooled instances. Declaration void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Quantity that keep pooled instances. Rent() Return the pooled instance. If pool is empty, create new instance and returns it. Declaration T Rent() Returns Type Description T Return(T) Return instance to the pool. Declaration void Return(T instance) Parameters Type Name Description T instance"
  },
  "api/MackySoft.XPool.ObjectModel.html": {
    "href": "api/MackySoft.XPool.ObjectModel.html",
    "title": "Namespace MackySoft.XPool.ObjectModel | XPool",
    "keywords": "Namespace MackySoft.XPool.ObjectModel Classes PoolBase<T> Provides basic features of pool."
  },
  "api/MackySoft.XPool.ObjectModel.PoolBase-1.html": {
    "href": "api/MackySoft.XPool.ObjectModel.PoolBase-1.html",
    "title": "Class PoolBase<T> | XPool",
    "keywords": "Class PoolBase<T> Provides basic features of pool. Inheritance Object PoolBase<T> Implements IPool <T> Namespace : MackySoft.XPool.ObjectModel Assembly : cs.temp.dll.dll Syntax public abstract class PoolBase<T> : IPool<T> Type Parameters Name Description T Constructors PoolBase(Int32) Initialize the pool with capacity. The inherited class must call this constructor. Declaration protected PoolBase(int capacity) Parameters Type Name Description Int32 capacity The pool capacity. If less than or equal to 0, will be thrown. Properties Capacity Declaration public int Capacity { get; } Property Value Type Description Int32 Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Factory() Called when called Rent() if pool is empty. This method must return a not null. Declaration protected abstract T Factory() Returns Type Description T OnRelease(T) Called when the capacity of the pool is exceeded and the instance cannot be returned. The process to release the object must be performed, such as Dispose. Declaration protected abstract void OnRelease(T instance) Parameters Type Name Description T instance OnRent(T) Called when rent an instance from the pool. Declaration protected abstract void OnRent(T instance) Parameters Type Name Description T instance OnReturn(T) Called when return an instance to the pool. Declaration protected abstract void OnReturn(T instance) Parameters Type Name Description T instance ReleaseInstances(Int32) Keeps the specified quantity and releases the pooled instances. Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Quantity that keep pooled instances. If less than 0 or greater than capacity, will be thrown. Rent() Return the pooled instance. If pool is empty, create new instance and returns it. Declaration public T Rent() Returns Type Description T Return(T) Return instance to the pool. If the capacity is exceeded, the instance will not be returned to the pool. Declaration public void Return(T instance) Parameters Type Name Description T instance Implements IPool<T>"
  },
  "api/MackySoft.XPool.PoolExtensions.html": {
    "href": "api/MackySoft.XPool.PoolExtensions.html",
    "title": "Class PoolExtensions | XPool",
    "keywords": "Class PoolExtensions Inheritance Object PoolExtensions Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public static class PoolExtensions Methods Clear<T>(IPool<T>) Release the all pooled instances. Declaration public static void Clear<T>(this IPool<T> pool) Parameters Type Name Description IPool <T> pool Type Parameters Name Description T RentTemporary<T>(IPool<T>, out T) Temporary rent an instance from pool. By using the using statement, you can safely return instance. using (myPool.RentTemporary(out var instance)) { // Use instance... } Declaration public static RentInstance<T> RentTemporary<T>(this IPool<T> pool, out T instance) Parameters Type Name Description IPool <T> pool T instance Returns Type Description RentInstance <T> Type Parameters Name Description T Return<T>(IPool<T>, ref T) Return the instance to the pool and set reference to null. Declaration public static void Return<T>(this IPool<T> pool, ref T instance) Parameters Type Name Description IPool <T> pool T instance Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.RentInstance-1.html": {
    "href": "api/MackySoft.XPool.RentInstance-1.html",
    "title": "Struct RentInstance<T> | XPool",
    "keywords": "Struct RentInstance<T> This is a token that indicates that rented an instance from the pool. You can return an instance to the pool by calling Dispose() . See: RentTemporary<T>(IPool<T>, out T) Implements IDisposable Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public struct RentInstance<T> Type Parameters Name Description T Methods Dispose() Return instance to the pool. Declaration public void Dispose() Implements IDisposable"
  },
  "api/MackySoft.XPool.Tests.FactoryPoolTest.html": {
    "href": "api/MackySoft.XPool.Tests.FactoryPoolTest.html",
    "title": "Class FactoryPoolTest | XPool",
    "keywords": "Class FactoryPoolTest Inheritance Object FactoryPoolTest Namespace : MackySoft.XPool.Tests Assembly : cs.temp.dll.dll Syntax public class FactoryPoolTest Methods Not_return_instance_to_pool_if_capacity_is_exceeded() Declaration public void Not_return_instance_to_pool_if_capacity_is_exceeded() onRelease_is_called_if_capacity_is_exceeded() Declaration public void onRelease_is_called_if_capacity_is_exceeded() onRelease_is_called_when_clear_pool() Declaration public void onRelease_is_called_when_clear_pool() onRent_is_called_if_Rent_suceeded() Declaration public void onRent_is_called_if_Rent_suceeded() onReturn_is_called_if_Return_suceeded() Declaration public void onReturn_is_called_if_Return_suceeded() ReleaseInstances_is_keep_specified_quantity_and_release_instances() Declaration public void ReleaseInstances_is_keep_specified_quantity_and_release_instances() ReleaseInstances_is_release_all_instances_if_keep_is_zero() Declaration public void ReleaseInstances_is_release_all_instances_if_keep_is_zero() ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Declaration public void ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Rent_returned_new_instance_if_first_Rent() Declaration public void Rent_returned_new_instance_if_first_Rent() Rent_returned_pooled_instance() Declaration public void Rent_returned_pooled_instance() Throw_ArgumentNullException_if_factory_is_null() Declaration public void Throw_ArgumentNullException_if_factory_is_null() Throw_ArgumentOutOfRangeException_if_capcity_less_than_zero() Declaration public void Throw_ArgumentOutOfRangeException_if_capcity_less_than_zero() Throw_NullReferenceException_if_factory_returned_null() Declaration public void Throw_NullReferenceException_if_factory_returned_null()"
  },
  "api/MackySoft.XPool.Tests.html": {
    "href": "api/MackySoft.XPool.Tests.html",
    "title": "Namespace MackySoft.XPool.Tests | XPool",
    "keywords": "Namespace MackySoft.XPool.Tests Classes FactoryPoolTest PoolExtensions Unit"
  },
  "api/MackySoft.XPool.Tests.PoolExtensions.html": {
    "href": "api/MackySoft.XPool.Tests.PoolExtensions.html",
    "title": "Class PoolExtensions | XPool",
    "keywords": "Class PoolExtensions Inheritance Object PoolExtensions Namespace : MackySoft.XPool.Tests Assembly : cs.temp.dll.dll Syntax public static class PoolExtensions Methods WarmUp<T>(IPool<T>, Int32) Declaration public static void WarmUp<T>(this IPool<T> pool, int count) Parameters Type Name Description IPool <T> pool Int32 count Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Tests.Unit.html": {
    "href": "api/MackySoft.XPool.Tests.Unit.html",
    "title": "Class Unit | XPool",
    "keywords": "Class Unit Inheritance Object Unit Namespace : MackySoft.XPool.Tests Assembly : cs.temp.dll.dll Syntax public class Unit Fields Default Declaration public static readonly Unit Default Field Value Type Description Unit"
  },
  "api/MackySoft.XPool.Unity.ComponentPool-1.html": {
    "href": "api/MackySoft.XPool.Unity.ComponentPool-1.html",
    "title": "Class ComponentPool<T> | XPool",
    "keywords": "Class ComponentPool<T> A pool for Component. Inheritance Object UnityObjectPool <T> ComponentPool<T> Implements IHierarchicalUnityObjectPool <T> IUnityObjectPool <T> IPool <T> Inherited Members UnityObjectPool<T>.m_Original UnityObjectPool<T>.m_OnCreate UnityObjectPool<T>.m_OnRent UnityObjectPool<T>.m_OnReturn UnityObjectPool<T>.m_OnRelease UnityObjectPool<T>.Original UnityObjectPool<T>.Capacity UnityObjectPool<T>.Count UnityObjectPool<T>.OnCreate UnityObjectPool<T>.OnRent UnityObjectPool<T>.OnReturn UnityObjectPool<T>.OnRelease UnityObjectPool<T>.Rent() UnityObjectPool<T>.Return(T) UnityObjectPool<T>.ReleaseInstances(Int32) UnityObjectPool<T>.GetPooledInstance() Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class ComponentPool<T> : UnityObjectPool<T>, IHierarchicalUnityObjectPool<T>, IUnityObjectPool<T>, IPool<T> where T : Component Type Parameters Name Description T Constructors ComponentPool() Declaration public ComponentPool() ComponentPool(T, Int32) Declaration public ComponentPool(T original, int capacity) Parameters Type Name Description T original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Methods Rent(Transform, Boolean) Declaration public T Rent(Transform parent, bool worldPositionStays) Parameters Type Name Description Transform parent Boolean worldPositionStays Returns Type Description T Rent(Vector3, Quaternion, Transform) Declaration public T Rent(Vector3 position, Quaternion rotation, Transform parent = null) Parameters Type Name Description Vector3 position Quaternion rotation Transform parent Returns Type Description T Implements IHierarchicalUnityObjectPool<T> IUnityObjectPool<T> IPool<T>"
  },
  "api/MackySoft.XPool.Unity.DefaultFunctions.html": {
    "href": "api/MackySoft.XPool.Unity.DefaultFunctions.html",
    "title": "Class DefaultFunctions | XPool",
    "keywords": "Class DefaultFunctions Inheritance Object DefaultFunctions Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public static class DefaultFunctions Methods Destroy<T>() Declaration public static Action<T> Destroy<T>() where T : UnityObject Returns Type Description Action <T> Type Parameters Name Description T DestroyGameObjectWithComponent<T>() Declaration public static Action<T> DestroyGameObjectWithComponent<T>() where T : Component Returns Type Description Action <T> Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Unity.GameObjectPool.html": {
    "href": "api/MackySoft.XPool.Unity.GameObjectPool.html",
    "title": "Class GameObjectPool | XPool",
    "keywords": "Class GameObjectPool A pool for GameObject. Inheritance Object UnityObjectPool < GameObject > GameObjectPool Implements IHierarchicalUnityObjectPool < GameObject > IUnityObjectPool < GameObject > IPool < GameObject > Inherited Members UnityObjectPool<GameObject>.m_Original UnityObjectPool<GameObject>.m_OnCreate UnityObjectPool<GameObject>.m_OnRent UnityObjectPool<GameObject>.m_OnReturn UnityObjectPool<GameObject>.m_OnRelease UnityObjectPool<GameObject>.Original UnityObjectPool<GameObject>.Capacity UnityObjectPool<GameObject>.Count UnityObjectPool<GameObject>.OnCreate UnityObjectPool<GameObject>.OnRent UnityObjectPool<GameObject>.OnReturn UnityObjectPool<GameObject>.OnRelease UnityObjectPool<GameObject>.Rent() UnityObjectPool<GameObject>.Return(GameObject) UnityObjectPool<GameObject>.ReleaseInstances(Int32) UnityObjectPool<GameObject>.GetPooledInstance() Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class GameObjectPool : UnityObjectPool<GameObject>, IHierarchicalUnityObjectPool<GameObject>, IUnityObjectPool<GameObject>, IPool<GameObject> Constructors GameObjectPool() Declaration public GameObjectPool() GameObjectPool(GameObject, Int32) Declaration public GameObjectPool(GameObject original, int capacity) Parameters Type Name Description GameObject original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Methods Rent(Transform, Boolean) Declaration public GameObject Rent(Transform parent, bool worldPositionStays) Parameters Type Name Description Transform parent Boolean worldPositionStays Returns Type Description GameObject Rent(Vector3, Quaternion, Transform) Declaration public GameObject Rent(Vector3 position, Quaternion rotation, Transform parent = null) Parameters Type Name Description Vector3 position Quaternion rotation Transform parent Returns Type Description GameObject Implements IHierarchicalUnityObjectPool<T> IUnityObjectPool<T> IPool<T>"
  },
  "api/MackySoft.XPool.Unity.html": {
    "href": "api/MackySoft.XPool.Unity.html",
    "title": "Namespace MackySoft.XPool.Unity | XPool",
    "keywords": "Namespace MackySoft.XPool.Unity Classes ComponentPool<T> A pool for Component. DefaultFunctions GameObjectPool A pool for GameObject. ParticleSystemPool Optimized pool for . ParticleSystemPool.ParticleSystemStoppedTrigger SerializedPropertyUtility UnityObjectPool<T> A pool for object that inherit from . UnityObjectPoolDrawer Interfaces IHierarchicalUnityObjectPool<T> Interface that provides rent method for GameObject or components. IUnityObjectPool<T> Interface that provides a pool for ."
  },
  "api/MackySoft.XPool.Unity.IHierarchicalUnityObjectPool-1.html": {
    "href": "api/MackySoft.XPool.Unity.IHierarchicalUnityObjectPool-1.html",
    "title": "Interface IHierarchicalUnityObjectPool<T> | XPool",
    "keywords": "Interface IHierarchicalUnityObjectPool<T> Interface that provides rent method for GameObject or components. Inherited Members IPool<T>.Capacity IPool<T>.Count IPool<T>.Rent() IPool<T>.Return(T) IPool<T>.ReleaseInstances(Int32) Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public interface IHierarchicalUnityObjectPool<T> : IUnityObjectPool<T>, IPool<T> where T : UnityObject Type Parameters Name Description T Methods Rent(Transform, Boolean) Return the pooled instance. If pool is empty, create new instance and returns it. Declaration T Rent(Transform parent, bool worldPositionStays) Parameters Type Name Description Transform parent Boolean worldPositionStays Returns Type Description T Rent(Vector3, Quaternion, Transform) Return the pooled instance. If pool is empty, create new instance and returns it. Declaration T Rent(Vector3 position, Quaternion rotation, Transform parent = null) Parameters Type Name Description Vector3 position Quaternion rotation Transform parent Returns Type Description T"
  },
  "api/MackySoft.XPool.Unity.IUnityObjectPool-1.html": {
    "href": "api/MackySoft.XPool.Unity.IUnityObjectPool-1.html",
    "title": "Interface IUnityObjectPool<T> | XPool",
    "keywords": "Interface IUnityObjectPool<T> Interface that provides a pool for . Inherited Members IPool<T>.Capacity IPool<T>.Count IPool<T>.Rent() IPool<T>.Return(T) IPool<T>.ReleaseInstances(Int32) Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public interface IUnityObjectPool<T> : IPool<T> where T : UnityObject Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Unity.ObjectModel.ComponentPoolBase-1.html": {
    "href": "api/MackySoft.XPool.Unity.ObjectModel.ComponentPoolBase-1.html",
    "title": "Class ComponentPoolBase<T> | XPool",
    "keywords": "Class ComponentPoolBase<T> Base of pool for . Inheritance Object UnityObjectPoolBase <T> ComponentPoolBase<T> Implements IHierarchicalUnityObjectPool <T> IUnityObjectPool <T> IPool <T> Inherited Members UnityObjectPoolBase<T>.m_Original UnityObjectPoolBase<T>.Capacity UnityObjectPoolBase<T>.Count UnityObjectPoolBase<T>.Rent() UnityObjectPoolBase<T>.Return(T) UnityObjectPoolBase<T>.ReleaseInstances(Int32) UnityObjectPoolBase<T>.GetPooledInstance() UnityObjectPoolBase<T>.OnCreate(T) UnityObjectPoolBase<T>.OnRent(T) UnityObjectPoolBase<T>.OnReturn(T) UnityObjectPoolBase<T>.OnRelease(T) Namespace : MackySoft.XPool.Unity.ObjectModel Assembly : cs.temp.dll.dll Syntax public abstract class ComponentPoolBase<T> : UnityObjectPoolBase<T>, IHierarchicalUnityObjectPool<T>, IUnityObjectPool<T>, IPool<T> where T : Component Type Parameters Name Description T Constructors ComponentPoolBase() Declaration protected ComponentPoolBase() ComponentPoolBase(T, Int32) Declaration protected ComponentPoolBase(T original, int capacity) Parameters Type Name Description T original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Methods Rent(Transform, Boolean) Declaration public T Rent(Transform parent, bool worldPositionStays) Parameters Type Name Description Transform parent Boolean worldPositionStays Returns Type Description T Rent(Vector3, Quaternion, Transform) Declaration public T Rent(Vector3 position, Quaternion rotation, Transform parent = null) Parameters Type Name Description Vector3 position Quaternion rotation Transform parent Returns Type Description T Implements IHierarchicalUnityObjectPool<T> IUnityObjectPool<T> IPool<T>"
  },
  "api/MackySoft.XPool.Unity.ObjectModel.html": {
    "href": "api/MackySoft.XPool.Unity.ObjectModel.html",
    "title": "Namespace MackySoft.XPool.Unity.ObjectModel | XPool",
    "keywords": "Namespace MackySoft.XPool.Unity.ObjectModel Classes ComponentPoolBase<T> Base of pool for . UnityObjectPoolBase<T> Base of pool for ."
  },
  "api/MackySoft.XPool.Unity.ObjectModel.UnityObjectPoolBase-1.html": {
    "href": "api/MackySoft.XPool.Unity.ObjectModel.UnityObjectPoolBase-1.html",
    "title": "Class UnityObjectPoolBase<T> | XPool",
    "keywords": "Class UnityObjectPoolBase<T> Base of pool for . Inheritance Object UnityObjectPoolBase<T> ComponentPoolBase<T> Implements IUnityObjectPool <T> IPool <T> Namespace : MackySoft.XPool.Unity.ObjectModel Assembly : cs.temp.dll.dll Syntax public abstract class UnityObjectPoolBase<T> : IUnityObjectPool<T>, IPool<T> where T : UnityObject Type Parameters Name Description T Constructors UnityObjectPoolBase() Declaration protected UnityObjectPoolBase() UnityObjectPoolBase(T, Int32) Declaration protected UnityObjectPoolBase(T original, int capacity) Parameters Type Name Description T original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Fields m_Original Declaration protected T m_Original Field Value Type Description T Properties Capacity Declaration public int Capacity { get; } Property Value Type Description Int32 Count Declaration public int Count { get; } Property Value Type Description Int32 Methods GetPooledInstance() Try to get an instance until the pool is empty or an instance can be retrieved. This is because can become null externally due to the method. Declaration protected T GetPooledInstance() Returns Type Description T OnCreate(T) Called when called Rent() if pool is empty and new instance is instantiated by the pool. Declaration protected abstract void OnCreate(T instance) Parameters Type Name Description T instance OnRelease(T) Called when the capacity of the pool is exceeded and the instance cannot be returned. The process to release the object must be performed, such as Dispose. Declaration protected abstract void OnRelease(T instance) Parameters Type Name Description T instance OnRent(T) Called when rent an instance from the pool. Declaration protected abstract void OnRent(T instance) Parameters Type Name Description T instance OnReturn(T) Called when return an instance to the pool. Declaration protected abstract void OnReturn(T instance) Parameters Type Name Description T instance ReleaseInstances(Int32) Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Rent() Declaration public T Rent() Returns Type Description T Return(T) Declaration public void Return(T instance) Parameters Type Name Description T instance Implements IUnityObjectPool<T> IPool<T>"
  },
  "api/MackySoft.XPool.Unity.ParticleSystemPool.html": {
    "href": "api/MackySoft.XPool.Unity.ParticleSystemPool.html",
    "title": "Class ParticleSystemPool | XPool",
    "keywords": "Class ParticleSystemPool Optimized pool for . Inheritance Object ParticleSystemPool Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class ParticleSystemPool : ComponentPoolBase<ParticleSystem> Constructors ParticleSystemPool() Declaration public ParticleSystemPool() ParticleSystemPool(ParticleSystem, Int32) Declaration public ParticleSystemPool(ParticleSystem original, int capacity) Parameters Type Name Description ParticleSystem original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Properties PlayOnRent If true, will play when the it is rented. Declaration public bool PlayOnRent { get; set; } Property Value Type Description Boolean Methods OnCreate(ParticleSystem) Declaration protected override void OnCreate(ParticleSystem instance) Parameters Type Name Description ParticleSystem instance OnRelease(ParticleSystem) Declaration protected override void OnRelease(ParticleSystem instance) Parameters Type Name Description ParticleSystem instance OnRent(ParticleSystem) Declaration protected override void OnRent(ParticleSystem instance) Parameters Type Name Description ParticleSystem instance OnReturn(ParticleSystem) Declaration protected override void OnReturn(ParticleSystem instance) Parameters Type Name Description ParticleSystem instance"
  },
  "api/MackySoft.XPool.Unity.ParticleSystemPool.ParticleSystemStoppedTrigger.html": {
    "href": "api/MackySoft.XPool.Unity.ParticleSystemPool.ParticleSystemStoppedTrigger.html",
    "title": "Class ParticleSystemPool.ParticleSystemStoppedTrigger | XPool",
    "keywords": "Class ParticleSystemPool.ParticleSystemStoppedTrigger Inheritance Object ParticleSystemPool.ParticleSystemStoppedTrigger Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class ParticleSystemStoppedTrigger : MonoBehaviour"
  },
  "api/MackySoft.XPool.Unity.SerializedPropertyUtility.html": {
    "href": "api/MackySoft.XPool.Unity.SerializedPropertyUtility.html",
    "title": "Class SerializedPropertyUtility | XPool",
    "keywords": "Class SerializedPropertyUtility Inheritance Object SerializedPropertyUtility Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public static class SerializedPropertyUtility Methods GetVisibleChildren(SerializedProperty) Declaration public static IEnumerable<SerializedProperty> GetVisibleChildren(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description IEnumerable < SerializedProperty >"
  },
  "api/MackySoft.XPool.Unity.Tests.html": {
    "href": "api/MackySoft.XPool.Unity.Tests.html",
    "title": "Namespace MackySoft.XPool.Unity.Tests | XPool",
    "keywords": "Namespace MackySoft.XPool.Unity.Tests Classes UnityObjectPoolBaseTest UnityObjectPoolTest"
  },
  "api/MackySoft.XPool.Unity.Tests.UnityObjectPoolBaseTest.html": {
    "href": "api/MackySoft.XPool.Unity.Tests.UnityObjectPoolBaseTest.html",
    "title": "Class UnityObjectPoolBaseTest | XPool",
    "keywords": "Class UnityObjectPoolBaseTest Inheritance Object UnityObjectPoolBaseTest Namespace : MackySoft.XPool.Unity.Tests Assembly : cs.temp.dll.dll Syntax public class UnityObjectPoolBaseTest Methods Create_new_instance_if_cant_get_pooled_instance() Declaration public void Create_new_instance_if_cant_get_pooled_instance() OneTimeSetUp() Declaration public void OneTimeSetUp() OneTimeTearDown() Declaration public void OneTimeTearDown() Release_instance_if_capacity_is_exceeded() Declaration public void Release_instance_if_capacity_is_exceeded() ReleaseInstances_is_keep_specified_quantity_and_release_instances() Declaration public void ReleaseInstances_is_keep_specified_quantity_and_release_instances() ReleaseInstances_is_release_all_instances_if_keep_is_zero() Declaration public void ReleaseInstances_is_release_all_instances_if_keep_is_zero() ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Declaration public void ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Throw_ArgumentNullException_if_original_is_null() Declaration public void Throw_ArgumentNullException_if_original_is_null() Throw_ArgumentOutOfRangeException_if_capacity_is_less_than_zero() Declaration public void Throw_ArgumentOutOfRangeException_if_capacity_is_less_than_zero()"
  },
  "api/MackySoft.XPool.Unity.Tests.UnityObjectPoolTest.html": {
    "href": "api/MackySoft.XPool.Unity.Tests.UnityObjectPoolTest.html",
    "title": "Class UnityObjectPoolTest | XPool",
    "keywords": "Class UnityObjectPoolTest Inheritance Object UnityObjectPoolTest Namespace : MackySoft.XPool.Unity.Tests Assembly : cs.temp.dll.dll Syntax public class UnityObjectPoolTest Methods Create_new_instance_if_cant_get_pooled_instance() Declaration public void Create_new_instance_if_cant_get_pooled_instance() OneTimeSetUp() Declaration public void OneTimeSetUp() OneTimeTearDown() Declaration public void OneTimeTearDown() Release_instance_if_capacity_is_exceeded() Declaration public void Release_instance_if_capacity_is_exceeded() ReleaseInstances_is_keep_specified_quantity_and_release_instances() Declaration public void ReleaseInstances_is_keep_specified_quantity_and_release_instances() ReleaseInstances_is_release_all_instances_if_keep_is_zero() Declaration public void ReleaseInstances_is_release_all_instances_if_keep_is_zero() ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Declaration public void ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Throw_ArgumentNullException_if_original_is_null() Declaration public void Throw_ArgumentNullException_if_original_is_null() Throw_ArgumentOutOfRangeException_if_capacity_is_less_than_zero() Declaration public void Throw_ArgumentOutOfRangeException_if_capacity_is_less_than_zero() Throw_InvaidOperationException_if_try_to_set_callback_when_there_is_instance_in_pool() Declaration public void Throw_InvaidOperationException_if_try_to_set_callback_when_there_is_instance_in_pool()"
  },
  "api/MackySoft.XPool.Unity.UnityObjectPool-1.html": {
    "href": "api/MackySoft.XPool.Unity.UnityObjectPool-1.html",
    "title": "Class UnityObjectPool<T> | XPool",
    "keywords": "Class UnityObjectPool<T> A pool for object that inherit from . Inheritance Object UnityObjectPool<T> ComponentPool<T> GameObjectPool Implements IUnityObjectPool <T> IPool <T> Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class UnityObjectPool<T> : IUnityObjectPool<T>, IPool<T> where T : UnityObject Type Parameters Name Description T Constructors UnityObjectPool() Declaration public UnityObjectPool() UnityObjectPool(T, Int32) Declaration public UnityObjectPool(T original, int capacity) Parameters Type Name Description T original The original object from which the pool will instantiate a new instance. Int32 capacity The pool capacity. If less than 0, will be thrown. Fields m_OnCreate Declaration protected Action<T> m_OnCreate Field Value Type Description Action <T> m_OnRelease Declaration protected Action<T> m_OnRelease Field Value Type Description Action <T> m_OnRent Declaration protected Action<T> m_OnRent Field Value Type Description Action <T> m_OnReturn Declaration protected Action<T> m_OnReturn Field Value Type Description Action <T> m_Original Declaration protected T m_Original Field Value Type Description T Properties Capacity Declaration public int Capacity { get; } Property Value Type Description Int32 Count Declaration public int Count { get; } Property Value Type Description Int32 OnCreate Called when called Rent() if pool is empty and new instance is instantiated by the pool. Declaration public Action<T> OnCreate { set; } Property Value Type Description Action <T> OnRelease Called when the capacity of the pool is exceeded and the instance cannot be returned. The process to release the object must be performed, such as Dispose. Declaration public Action<T> OnRelease { set; } Property Value Type Description Action <T> OnRent Called when rent an instance from the pool. Declaration public Action<T> OnRent { set; } Property Value Type Description Action <T> OnReturn Called when return an instance to the pool. Declaration public Action<T> OnReturn { set; } Property Value Type Description Action <T> Original The original object from which the pool will instantiate a new instance. Declaration public T Original { get; } Property Value Type Description T Methods GetPooledInstance() Try to get an instance until the pool is empty or an instance can be retrieved. This is because can become null externally due to the method. Declaration protected T GetPooledInstance() Returns Type Description T ReleaseInstances(Int32) Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Rent() Declaration public T Rent() Returns Type Description T Return(T) Declaration public void Return(T instance) Parameters Type Name Description T instance Implements IUnityObjectPool<T> IPool<T>"
  },
  "api/MackySoft.XPool.Unity.UnityObjectPoolDrawer.html": {
    "href": "api/MackySoft.XPool.Unity.UnityObjectPoolDrawer.html",
    "title": "Class UnityObjectPoolDrawer | XPool",
    "keywords": "Class UnityObjectPoolDrawer Inheritance Object UnityObjectPoolDrawer Namespace : MackySoft.XPool.Unity Assembly : cs.temp.dll.dll Syntax public class UnityObjectPoolDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | XPool",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.1.0] - 2022-XX-XX First release"
  },
  "index.html": {
    "href": "index.html",
    "title": "XPool - Object Pooling System | XPool",
    "keywords": "XPool - Object Pooling System Created by Hiroya Aramaki ( Makihiro ) What is XPool ? XPool is an object pooling library for Unity. This was developed to be able to do all the pooling expected in application development with just this library. All your classes can be pooled. Short code, easy to use. Fast performance Scalability Tested. It works stably. Table of Contents 📥 Installation 🔰 Usage Unity Object Pool ParticleSystem Pool Pure C# Object Pool Collection Pool Non Allocated Collections How to write custom pool ? ParticleSystemPool implementation Optimization ✉ Help & Contribute 📔 Author Info 📜 License 📥 Installation Coming soon <!--- Download any version from releases. Releases: https://github.com/mackysoft/XPool/releases ### Install via PackageManager Or, you can add this package by opening PackageManager and entering `https://github.com/mackysoft/XPool.git?path=Assets/MackySoft/MackySoft.XPool` from the `Add package from git URL` option. ### Install via Open UPM Or, you can install this package from the [Open UPM](https://openupm.com/packages/com.mackysoft.xpool/) registry. More details [here](https://openupm.com/). ``` openupm add com.mackysoft.xpool ``` --> 🔰 Usage The full Scripting API is here . Scripting API: https://mackysoft.github.io/XPool/api/MackySoft.XPool.html Unity Object Pool (GameObject, Component) Pooling of Unity Object (GameObject, Component) can be performed using GameObjectPool or ComponentPool<T> . These hierarchical objects can be rented by writing them in a similar way to Instantiate method. // Example code is being written... <!-- ```cs public class Projectile : MonoBehaviour { public float speed; public event Action OnHit; void Update () { transform.Translate(Vector3.forward * speed * Time.deltaTime); } void OnCollisionEnter (Collision collision) { OnHit?.Invoke(); } } public class OnHitTrigger : MonoBehaviour { public void Initialize (Projectile projectile,IPool<Projectile> pool) { projectile.OnHit += () => pool.Return(projectile); } } public class Shooter : MonoBehaviour { [SerializeField] ComponentPool<Projectile> m_ProjectilePool = new ComponentPool<Projectile>(); void Awake () { m_ProjectilePool.OnCreate = instance => instance.gameObject.AddComponent<OnHitTrigger>(); m_ProjectilePool.OnRent = instance => instance.gameObject.SetActive(true); m_ProjectilePool.OnRetuern = instance => instance.gameObject.SetActive(false); m_ProjectilePool.OnRelease = instance => Destroy(instance.gameObject); } public void Shoot (){ Projectile instance = m_ProjectilePool.Rent(transform.position,transform.rotation); instance.OnHit += () => } } ``` --> ParticleSystem Pool Optimized pools are available for some of the components implemented in Unity. This is an example of ParticleSystemPool usage. public class HitParticleSystemEmitter : MonoBehaviour { [SerializeField] ParticleSystemPool m_HitParticleSystemPool = new ParticleSystemPool(); void OnCollisionEnter (Collision collision) { // The rented ParticleSystem is automatically returned to the pool when completed. m_HitParticleSystemPool.Rent(collision.contacts[0],Quaternion.identity); } } If you need an optimized pool for other components, please refer to the How to write custom pool ? section, or give me feedback via issues or pull requests . Object Pool (Pure C# Object) FactoryPool<T> can be used to pool Pure C# Object. Unity Object are not supported, as they behave differently from Pure C# Object in that they can be set to null externally with Destroy method. // Give the capacity and factory method to the constructor. var pool = new FactoryPool<MyClass>(8,() => new MyClass()); // Create new instance by factory if pool is empty. MyClass instance = pool.Rent(); // Return instance to the pool. pool.Return(instance); Collection Pool ( T[] , List<T> , Qeueue<T> , Stack<T> , HashSet<T> , Dictionary<TKey,TValue> ) An optimized pool is provided for the generic collections provided in .NET Framework. // Rent an array from the pool. // Note that the array length to be rented is the next two powers of minimumLength. T[] array = ArrayPool<T>.Shared.Rent(minimumLength: 10); // Return array to the pool. ArrayPool<T>.Shared.Return(array); // ListPool<T>, QueuePool<T>, StackPool<T>, HashSetPool<T> are also available. List<T> list = ListPool<T>.Shared.Rent(); Queue<T> queue = QueuePool<T>.Shared.Rent(); Stack<T> stack = StackPool<T>.Shared.Rent(); HashSet<T> hashSet = HashSetPool<T>.Shared.Rent(); Dictionary<TKey,TValue> dictionary = DictionaryPool<TKey,TValue>.Shared.Rent(); Non allocated collections You can use the TemporaryCollections API that leverages ArrayPool<T> . These collections are a struct and internally use array rented from ArrayPool<T> . Therefore, it is fast and non-allocation. // Create a temporary array. var array = TemporaryArray<T>.Create(10); // You must release collection when you are done using it. array.Dispose(); // TemporaryList<T>, TemporaryQueue<T>, TemporaryStack<T> are also available. // var list = TemporaryList<T>.Create(); // var queue = TemporaryQueue<T>.Create(); // var stack = TemporaryStack<T>.Create(); How to write custom pool ? If you want to implement a more customized pool, you can quickly create one by using the provided base classes. The base class of the pool is in the ObjectModel namespace. MackySoft.XPool.ObjectMode.PoolBase<T> MackySoft.XPool.Unity.ObjectModel.UnityObjectPoolBase<T> MackySoft.XPool.Unity.ObjectModel.ComponentPoolBase<T> using MackySoft.XPool.ObjectModel; // PoolBase<T> is here. public class MyPool : PoolBase<MyClass> { public MyPool () { } public MyPool (MyClass original,int capacity) : base(original,capacity) { } // Called when Rent is invoked and there are no instances in the pool. protected override MyClass Factory () { return new MyClass(); } // Called when an instance is rented from the pool. // This is also the case when a new instance is created by the Factory. protected override void OnRent (MyClass instance) { } // Called when an instance is returned to the pool. protected override void OnReturn (MyClass instance) { } // Called when the capacity is exceeded and the instance cannot be returned to the pool, // or when the instance is released by the ReleaseInstances method. protected override void OnRelease (MyClass instance) { } } ParticleSystemPool implementation As an example, ParticleSystemPool is implemented using ComponentPoolBase<T> . Its functionality has been optimized for ParticleSystem. using System; using UnityEngine; using MackySoft.XPool.Unity.ObjectModel; // ComponentPoolBase<T> is here. [Serializable] public class ParticleSystemPool : ComponentPoolBase<ParticleSystem> { [SerializeField] bool m_PlayOnRent; public bool PlayOnRent { get => m_PlayOnRent; set => m_PlayOnRent = value; } public ParticleSystemPool () { } public ParticleSystemPool (ParticleSystem original,int capacity) : base(original,capacity) { } protected override void OnCreate (ParticleSystem instance) { var main = instance.main; main.stopAction = ParticleSystemStopAction.Callback; var trigger = instance.gameObject.AddComponent<ParticleSystemStoppedTrigger>(); trigger.Initialize(instance,this); } protected override void OnRent (ParticleSystem instance) { if (m_PlayOnRent) { instance.Play(true); } } protected override void OnReturn (ParticleSystem instance) { instance.Stop(true,ParticleSystemStopBehavior.StopEmitting); } protected override void OnRelease (ParticleSystem instance) { UnityEngine.Object.Destroy(instance.gameObject); } public class ParticleSystemStoppedTrigger : MonoBehaviour { ParticleSystem m_ParticleSystem; IPool<ParticleSystem> m_Pool; internal void Initialize (ParticleSystem ps,IPool<ParticleSystem> pool) { m_ParticleSystem = ps; m_Pool = pool; } void OnParticleSystemStopped () { m_Pool?.Return(m_ParticleSystem); } } } ✉ Help & Contribute I welcome feature requests and bug reports in issues and pull requests . If you feel that my works are worthwhile, I would greatly appreciate it if you could sponsor me. GitHub Sponsors: https://github.com/sponsors/mackysoft 📔 Author Info Hiroya Aramaki is a indie game developer in Japan. Twitter: https://twitter.com/makihiro_dev Blog: https://mackysoft.net/blog 📜 License This library is under the MIT License."
  }
}