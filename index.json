{
  "api/MackySoft.XPool.Collections.ArrayPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPool-1.html",
    "title": "Class ArrayPool<T> | XPool",
    "keywords": "Class ArrayPool<T> Inheritance Object ArrayPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class ArrayPool<T> Type Parameters Name Description T Constructors ArrayPool() Declaration public ArrayPool() Fields Shared Declaration public static readonly ArrayPool<T> Shared Field Value Type Description ArrayPool <T> Methods Clear() Clear the pool of this type. Declaration public void Clear() Rent(Int32) The array length is not always accurate. Declaration public T[] Rent(int minimumLength) Parameters Type Name Description Int32 minimumLength Returns Type Description T[] Exceptions Type Condition ArgumentOutOfRangeException Return(T[], Boolean) Return the array to the pool. The length of the array must be greater than or equal to 8 and a power of 2. Declaration public void Return(T[] array, bool clearArray = false) Parameters Type Name Description T[] array The length of the array must be greater than or equal to 8 and a power of 2. Boolean clearArray Return(ref T[], Boolean) Return the array to the pool and set array reference to null. The length of the array must be greater than or equal to 8 and a power of 2. Declaration public void Return(ref T[] array, bool clearArray = false) Parameters Type Name Description T[] array The length of the array must be greater than or equal to 8 and a power of 2. Boolean clearArray"
  },
  "api/MackySoft.XPool.Collections.ArrayPoolExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPoolExtensions.html",
    "title": "Class ArrayPoolExtensions | XPool",
    "keywords": "Class ArrayPoolExtensions Inheritance Object ArrayPoolExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class ArrayPoolExtensions Methods ToArrayFromPool<T>(IEnumerable<T>) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, ArrayPool<T>) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, ArrayPool<T>, out Int32) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, ArrayPool<T> pool, out int count) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Int32 count Number of elements in source. Returns Type Description T[] Type Parameters Name Description T ToArrayFromPool<T>(IEnumerable<T>, out Int32) Convert enumerable to array. Array are returned from ArrayPool<T> . The array length is not always accurate. Declaration public static T[] ToArrayFromPool<T>(this IEnumerable<T> source, out int count) Parameters Type Name Description IEnumerable <T> source Int32 count Number of elements in source. Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.ArrayPoolUtility.html": {
    "href": "api/MackySoft.XPool.Collections.ArrayPoolUtility.html",
    "title": "Class ArrayPoolUtility | XPool",
    "keywords": "Class ArrayPoolUtility Inheritance Object ArrayPoolUtility Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class ArrayPoolUtility Fields kMinArraySize Declaration public const int kMinArraySize = 8 Field Value Type Description Int32 Methods EnsureCapacity<T>(ref T[], Int32, ArrayPool<T>) Declaration public static void EnsureCapacity<T>(ref T[] array, int newSize, ArrayPool<T> pool) Parameters Type Name Description T[] array Int32 newSize ArrayPool <T> pool Type Parameters Name Description T EnsureCapacityCircular<T>(ref T[], Int32, Int32, ref Int32, ref Int32, ArrayPool<T>) Declaration public static bool EnsureCapacityCircular<T>(ref T[] array, int count, int newSize, ref int first, ref int last, ArrayPool<T> pool) Parameters Type Name Description T[] array Int32 count Int32 newSize Int32 first Int32 last ArrayPool <T> pool Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.HashSetPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.HashSetPool-1.html",
    "title": "Class HashSetPool<T> | XPool",
    "keywords": "Class HashSetPool<T> Inheritance Object HashSetPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class HashSetPool<T> Type Parameters Name Description T Constructors HashSetPool() Declaration public HashSetPool() Fields Shared Declaration public static readonly HashSetPool<T> Shared Field Value Type Description HashSetPool <T> Methods Clear() Declaration public void Clear() Rent() Declaration public HashSet<T> Rent() Returns Type Description HashSet <T> Return(HashSet<T>) Declaration public void Return(HashSet<T> stack) Parameters Type Name Description HashSet <T> stack Return(ref HashSet<T>) Declaration public void Return(ref HashSet<T> queue) Parameters Type Name Description HashSet <T> queue"
  },
  "api/MackySoft.XPool.Collections.html": {
    "href": "api/MackySoft.XPool.Collections.html",
    "title": "Namespace MackySoft.XPool.Collections | XPool",
    "keywords": "Namespace MackySoft.XPool.Collections Classes ArrayPool<T> ArrayPoolExtensions ArrayPoolUtility HashSetPool<T> ListPool<T> QueuePool<T> StackPool<T> TemporaryArrayExtensions TemporaryListExtensions Structs TemporaryArray<T> Temporary array without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal array. After using it, please call the Dispose(). TemporaryList<T> Temporary list without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal list. After using it, please call the Dispose(). TemporaryQueue<T> Temporary queue without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal queue. After using it, please call the Dispose()."
  },
  "api/MackySoft.XPool.Collections.ListPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.ListPool-1.html",
    "title": "Class ListPool<T> | XPool",
    "keywords": "Class ListPool<T> Inheritance Object ListPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class ListPool<T> Type Parameters Name Description T Constructors ListPool() Declaration public ListPool() Fields Shared Declaration public static readonly ListPool<T> Shared Field Value Type Description ListPool <T> Methods Clear() Declaration public void Clear() Rent() Rent list from pool. Declaration public List<T> Rent() Returns Type Description List <T> Return(List<T>) Return the list to the pool. Declaration public void Return(List<T> list) Parameters Type Name Description List <T> list Return(ref List<T>) Return the list to the pool and set list reference to null. Declaration public void Return(ref List<T> list) Parameters Type Name Description List <T> list"
  },
  "api/MackySoft.XPool.Collections.QueuePool-1.html": {
    "href": "api/MackySoft.XPool.Collections.QueuePool-1.html",
    "title": "Class QueuePool<T> | XPool",
    "keywords": "Class QueuePool<T> Inheritance Object QueuePool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class QueuePool<T> Type Parameters Name Description T Constructors QueuePool() Declaration public QueuePool() Fields Shared Declaration public static readonly QueuePool<T> Shared Field Value Type Description QueuePool <T> Methods Clear() Declaration public void Clear() Rent() Declaration public Queue<T> Rent() Returns Type Description Queue <T> Return(Queue<T>) Declaration public void Return(Queue<T> stack) Parameters Type Name Description Queue <T> stack Return(ref Queue<T>) Declaration public void Return(ref Queue<T> queue) Parameters Type Name Description Queue <T> queue"
  },
  "api/MackySoft.XPool.Collections.StackPool-1.html": {
    "href": "api/MackySoft.XPool.Collections.StackPool-1.html",
    "title": "Class StackPool<T> | XPool",
    "keywords": "Class StackPool<T> Inheritance Object StackPool<T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public class StackPool<T> Type Parameters Name Description T Constructors StackPool() Declaration public StackPool() Fields Shared Declaration public static readonly StackPool<T> Shared Field Value Type Description StackPool <T> Methods Clear() Declaration public void Clear() Rent() Declaration public Stack<T> Rent() Returns Type Description Stack <T> Return(Stack<T>) Declaration public void Return(Stack<T> stack) Parameters Type Name Description Stack <T> stack Return(ref Stack<T>) Declaration public void Return(ref Stack<T> stack) Parameters Type Name Description Stack <T> stack"
  },
  "api/MackySoft.XPool.Collections.TemporaryArray-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryArray-1.html",
    "title": "Struct TemporaryArray<T> | XPool",
    "keywords": "Struct TemporaryArray<T> Temporary array without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal array. After using it, please call the Dispose(). Implements IEnumerable <T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryArray<T> : IDisposable Type Parameters Name Description T Constructors TemporaryArray(ArrayPool<T>, Int32) Declaration public TemporaryArray(ArrayPool<T> pool, int length) Parameters Type Name Description ArrayPool <T> pool Int32 length Properties Array Internal array. The length of internal array is always greater than or equal to Length property. Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Length of internal array. Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Length Declaration public readonly int Length { get; } Property Value Type Description Int32 Methods Create(Int32) Create a temporary array of the specified length. Declaration public static TemporaryArray<T> Create(int length) Parameters Type Name Description Int32 length Returns Type Description TemporaryArray <T> Exceptions Type Condition ArgumentOutOfRangeException Create(Int32, ArrayPool<T>) Create a temporary array of the specified length. Declaration public static TemporaryArray<T> Create(int length, ArrayPool<T> pool) Parameters Type Name Description Int32 length ArrayPool <T> pool Returns Type Description TemporaryArray <T> Exceptions Type Condition ArgumentNullException ArgumentOutOfRangeException Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray From(IEnumerable<T>) Create a temporary array from the elements of . Declaration public static TemporaryArray<T> From(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryArray <T> Exceptions Type Condition ArgumentNullException From(IEnumerable<T>, ArrayPool<T>) Create a temporary array from the elements of . Declaration public static TemporaryArray<T> From(IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> Exceptions Type Condition ArgumentNullException From(TemporaryArray<T>) Create a temporary array from the elements of TemporaryArray<T> . Declaration public static TemporaryArray<T> From(TemporaryArray<T> source) Parameters Type Name Description TemporaryArray <T> source Returns Type Description TemporaryArray <T> From(TemporaryArray<T>, ArrayPool<T>) Create a temporary array from the elements of TemporaryArray<T> . Declaration public static TemporaryArray<T> From(TemporaryArray<T> source, ArrayPool<T> pool) Parameters Type Name Description TemporaryArray <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> Exceptions Type Condition ArgumentException ArgumentNullException GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Implements IEnumerable<>"
  },
  "api/MackySoft.XPool.Collections.TemporaryArrayExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryArrayExtensions.html",
    "title": "Class TemporaryArrayExtensions | XPool",
    "keywords": "Class TemporaryArrayExtensions Inheritance Object TemporaryArrayExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class TemporaryArrayExtensions Methods ToTemporaryArray<T>(IEnumerable<T>) Create a temporary array from the elements of . Declaration public static TemporaryArray<T> ToTemporaryArray<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryArray <T> Type Parameters Name Description T ToTemporaryArray<T>(IEnumerable<T>, ArrayPool<T>) Create a temporary array from the elements of . Declaration public static TemporaryArray<T> ToTemporaryArray<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryArray <T> Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.TemporaryList-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryList-1.html",
    "title": "Struct TemporaryList<T> | XPool",
    "keywords": "Struct TemporaryList<T> Temporary list without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal list. After using it, please call the Dispose(). Implements IEnumerable <T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryList<T> : IDisposable Type Parameters Name Description T Constructors TemporaryList(ArrayPool<T>, Int32) Declaration public TemporaryList(ArrayPool<T> pool, int minimumCapacity) Parameters Type Name Description ArrayPool <T> pool Int32 minimumCapacity Properties Array Internal array. The length of internal array is always greater than or equal to property. Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Length of internal array. Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Count Declaration public readonly int Count { get; } Property Value Type Description Int32 Item[Int32] Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Add(T) Set item to current length and increase length. Declaration public void Add(T item) Parameters Type Name Description T item AddRange(IEnumerable<T>) Declaration public void AddRange(IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection BinarySearch(T) Declaration public int BinarySearch(T item) Parameters Type Name Description T item Returns Type Description Int32 BinarySearch(T, IComparer<T>) Declaration public int BinarySearch(T item, IComparer<T> comparer) Parameters Type Name Description T item IComparer <T> comparer Returns Type Description Int32 BinarySearch(Int32, Int32, T, IComparer<T>) Declaration public int BinarySearch(int index, int count, T item, IComparer<T> comparer) Parameters Type Name Description Int32 index Int32 count T item IComparer <T> comparer Returns Type Description Int32 Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[]) Declaration public void CopyTo(T[] array) Parameters Type Name Description T[] array CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex CopyTo(Int32, T[], Int32, Int32) Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index T[] array Int32 arrayIndex Int32 count Create() Create an empty temporay list using Shared . Declaration public static TemporaryList<T> Create() Returns Type Description TemporaryList <T> Create(ArrayPool<T>) Create an empty temporay list. Declaration public static TemporaryList<T> Create(ArrayPool<T> pool) Parameters Type Name Description ArrayPool <T> pool Returns Type Description TemporaryList <T> Create(Int32) Create an empty temporary list with the specified initial capacity. Declaration public static TemporaryList<T> Create(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity Returns Type Description TemporaryList <T> Create(Int32, ArrayPool<T>) Create an empty temporary list with the specified initial capacity. Declaration public static TemporaryList<T> Create(int minimumCapacity, ArrayPool<T> pool) Parameters Type Name Description Int32 minimumCapacity ArrayPool <T> pool Returns Type Description TemporaryList <T> Exceptions Type Condition ArgumentNullException Dispose() Return the internal array to the pool. Declaration public void Dispose() Dispose(Boolean) Return the internal array to the pool. Declaration public void Dispose(bool clearArray) Parameters Type Name Description Boolean clearArray Exists(Predicate<T>) Declaration public bool Exists(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Boolean Find(Predicate<T>) Declaration public T Find(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T FindAll(Predicate<T>) Declaration public TemporaryList<T> FindAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description TemporaryList <T> FindIndex(Int32, Int32, Predicate<T>) Declaration public int FindIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description Int32 startIndex Int32 count Predicate <T> match Returns Type Description Int32 FindIndex(Int32, Predicate<T>) Declaration public int FindIndex(int startIndex, Predicate<T> match) Parameters Type Name Description Int32 startIndex Predicate <T> match Returns Type Description Int32 FindIndex(Predicate<T>) Declaration public int FindIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 FindLast(Predicate<T>) Declaration public T FindLast(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description T FindLastIndex(Int32, Int32, Predicate<T>) Declaration public int FindLastIndex(int startIndex, int count, Predicate<T> match) Parameters Type Name Description Int32 startIndex Int32 count Predicate <T> match Returns Type Description Int32 FindLastIndex(Int32, Predicate<T>) Declaration public int FindLastIndex(int startIndex, Predicate<T> match) Parameters Type Name Description Int32 startIndex Predicate <T> match Returns Type Description Int32 FindLastIndex(Predicate<T>) Declaration public int FindLastIndex(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 From(IEnumerable<T>) Create a temporary list from the elements of using Shared . Declaration public static TemporaryList<T> From(IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryList <T> From(IEnumerable<T>, ArrayPool<T>) Create a temporary list from the elements of . Declaration public static TemporaryList<T> From(IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryList <T> Exceptions Type Condition ArgumentException ArgumentNullException GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IndexOf(T) Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 IndexOf(T, Int32) Declaration public int IndexOf(T item, int index) Parameters Type Name Description T item Int32 index Returns Type Description Int32 IndexOf(T, Int32, Int32) Declaration public int IndexOf(T item, int index, int count) Parameters Type Name Description T item Int32 index Int32 count Returns Type Description Int32 Insert(Int32, T) Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index T item InsertRange(Int32, IEnumerable<T>) Declaration public void InsertRange(int index, IEnumerable<T> collection) Parameters Type Name Description Int32 index IEnumerable <T> collection LastIndexOf(T) Declaration public int LastIndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 LastIndexOf(T, Int32) Declaration public int LastIndexOf(T item, int index) Parameters Type Name Description T item Int32 index Returns Type Description Int32 LastIndexOf(T, Int32, Int32) Declaration public int LastIndexOf(T item, int index, int count) Parameters Type Name Description T item Int32 index Int32 count Returns Type Description Int32 Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean RemoveAll(Predicate<T>) Declaration public int RemoveAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Int32 RemoveAt(Int32) Declaration public bool RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description Boolean RemoveRange(Int32, Int32) Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index Int32 count Reverse() Declaration public void Reverse() Reverse(Int32, Int32) Declaration public void Reverse(int index, int count) Parameters Type Name Description Int32 index Int32 count Sort() Declaration public void Sort() Sort(IComparer<T>) Declaration public void Sort(IComparer<T> comparer) Parameters Type Name Description IComparer <T> comparer Sort(Int32, Int32, IComparer<T>) Declaration public void Sort(int index, int count, IComparer<T> comparer) Parameters Type Name Description Int32 index Int32 count IComparer <T> comparer TrueForAll(Predicate<T>) Declaration public bool TrueForAll(Predicate<T> match) Parameters Type Name Description Predicate <T> match Returns Type Description Boolean Implements IEnumerable<>"
  },
  "api/MackySoft.XPool.Collections.TemporaryListExtensions.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryListExtensions.html",
    "title": "Class TemporaryListExtensions | XPool",
    "keywords": "Class TemporaryListExtensions Inheritance Object TemporaryListExtensions Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public static class TemporaryListExtensions Methods ToTemporaryList<T>(IEnumerable<T>) Create a temporary list from the elements of . Declaration public static TemporaryList<T> ToTemporaryList<T>(this IEnumerable<T> source) Parameters Type Name Description IEnumerable <T> source Returns Type Description TemporaryList <T> Type Parameters Name Description T ToTemporaryList<T>(IEnumerable<T>, ArrayPool<T>) Create a temporary list from the elements of using Shared . Declaration public static TemporaryList<T> ToTemporaryList<T>(this IEnumerable<T> source, ArrayPool<T> pool) Parameters Type Name Description IEnumerable <T> source ArrayPool <T> pool Returns Type Description TemporaryList <T> Type Parameters Name Description T"
  },
  "api/MackySoft.XPool.Collections.TemporaryQueue-1.html": {
    "href": "api/MackySoft.XPool.Collections.TemporaryQueue-1.html",
    "title": "Struct TemporaryQueue<T> | XPool",
    "keywords": "Struct TemporaryQueue<T> Temporary queue without allocation. This struct use ArrayPool<T> internally to avoid allocation and can be used just like a normal queue. After using it, please call the Dispose(). Implements IEnumerable <T> Namespace : MackySoft.XPool.Collections Assembly : cs.temp.dll.dll Syntax public struct TemporaryQueue<T> : IDisposable Type Parameters Name Description T Constructors TemporaryQueue(ArrayPool<T>, Int32) Declaration public TemporaryQueue(ArrayPool<T> pool, int minimumCapacity) Parameters Type Name Description ArrayPool <T> pool Int32 minimumCapacity Properties Array Declaration public readonly T[] Array { get; } Property Value Type Description T[] Capacity Declaration public readonly int Capacity { get; } Property Value Type Description Int32 Count Declaration public readonly int Count { get; } Property Value Type Description Int32 Methods Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex Create<T>() Create an empty temporay queue using Shared . Declaration public static TemporaryQueue<T> Create<T>() Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Create<T>(ArrayPool<T>) Create an empty temporay queue. Declaration public static TemporaryQueue<T> Create<T>(ArrayPool<T> pool) Parameters Type Name Description ArrayPool <T> pool Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Exceptions Type Condition ArgumentNullException Create<T>(Int32) Create an empty temporary queue with the specified initial capacity. Declaration public static TemporaryQueue<T> Create<T>(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Create<T>(Int32, ArrayPool<T>) Create an empty temporary queue with the specified initial capacity. Declaration public static TemporaryQueue<T> Create<T>(int minimumCapacity, ArrayPool<T> pool) Parameters Type Name Description Int32 minimumCapacity ArrayPool <T> pool Returns Type Description TemporaryQueue <T> Type Parameters Name Description T Exceptions Type Condition ArgumentNullException Dequeue() Declaration public T Dequeue() Returns Type Description T Dispose() Declaration public void Dispose() Enqueue(T) Declaration public void Enqueue(T item) Parameters Type Name Description T item GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Peek() Declaration public T Peek() Returns Type Description T Implements IEnumerable<>"
  },
  "api/MackySoft.XPool.Collections.Tests.ArrayPoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.ArrayPoolTest.html",
    "title": "Class ArrayPoolTest | XPool",
    "keywords": "Class ArrayPoolTest Inheritance Object ArrayPoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class ArrayPoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate() Return_empty_array_if_required_size_is_zero() Declaration public void Return_empty_array_if_required_size_is_zero() Return_minimum_size_array_if_required_size_less_than_minimum_array_size() Declaration public void Return_minimum_size_array_if_required_size_less_than_minimum_array_size() Returned_array_size_is_next_power_of_two(Int32) Declaration public void Returned_array_size_is_next_power_of_two(int powerOfTwoSize) Parameters Type Name Description Int32 powerOfTwoSize Throw_if_required_size_is_negative() Declaration public void Throw_if_required_size_is_negative()"
  },
  "api/MackySoft.XPool.Collections.Tests.HashSetPoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.HashSetPoolTest.html",
    "title": "Class HashSetPoolTest | XPool",
    "keywords": "Class HashSetPoolTest Inheritance Object HashSetPoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class HashSetPoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate()"
  },
  "api/MackySoft.XPool.Collections.Tests.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.html",
    "title": "Namespace MackySoft.XPool.Collections.Tests | XPool",
    "keywords": "Namespace MackySoft.XPool.Collections.Tests Classes ArrayPoolTest HashSetPoolTest ListPoolTest QueuePoolTest StackPoolTest TemporaryArrayTest TemporaryListTest TemporaryQueueTest"
  },
  "api/MackySoft.XPool.Collections.Tests.ListPoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.ListPoolTest.html",
    "title": "Class ListPoolTest | XPool",
    "keywords": "Class ListPoolTest Inheritance Object ListPoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class ListPoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate()"
  },
  "api/MackySoft.XPool.Collections.Tests.QueuePoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.QueuePoolTest.html",
    "title": "Class QueuePoolTest | XPool",
    "keywords": "Class QueuePoolTest Inheritance Object QueuePoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class QueuePoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate()"
  },
  "api/MackySoft.XPool.Collections.Tests.StackPoolTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.StackPoolTest.html",
    "title": "Class StackPoolTest | XPool",
    "keywords": "Class StackPoolTest Inheritance Object StackPoolTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class StackPoolTest Methods Init() Declaration public void Init() Rent_does_not_allocate() Declaration public void Rent_does_not_allocate() Return_does_not_allocate() Declaration public void Return_does_not_allocate()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryArrayTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryArrayTest.html",
    "title": "Class TemporaryArrayTest | XPool",
    "keywords": "Class TemporaryArrayTest Inheritance Object TemporaryArrayTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryArrayTest Methods Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Create_method_return_expected_array() Declaration public void Create_method_return_expected_array() Init() Declaration public void Init() Same_as_copied_collection() Declaration public void Same_as_copied_collection() Same_as_copied_temporary_array() Declaration public void Same_as_copied_temporary_array()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryListTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryListTest.html",
    "title": "Class TemporaryListTest | XPool",
    "keywords": "Class TemporaryListTest Inheritance Object TemporaryListTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryListTest Methods Add_does_not_allocate() Declaration public void Add_does_not_allocate() Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Create_method_return_expected_list() Declaration public void Create_method_return_expected_list() Init() Declaration public void Init() Same_as_copied_collection() Declaration public void Same_as_copied_collection()"
  },
  "api/MackySoft.XPool.Collections.Tests.TemporaryQueueTest.html": {
    "href": "api/MackySoft.XPool.Collections.Tests.TemporaryQueueTest.html",
    "title": "Class TemporaryQueueTest | XPool",
    "keywords": "Class TemporaryQueueTest Inheritance Object TemporaryQueueTest Namespace : MackySoft.XPool.Collections.Tests Assembly : cs.temp.dll.dll Syntax public class TemporaryQueueTest Methods Array_is_null_when_disposed() Declaration public void Array_is_null_when_disposed() Clear_succeeded() Declaration public void Clear_succeeded() Create_method_return_expected_queue() Declaration public void Create_method_return_expected_queue() Dequeue_succeeded() Declaration public void Dequeue_succeeded() Enqueue_succeeded() Declaration public void Enqueue_succeeded() Init() Declaration public void Init() Same_as_copied_array() Declaration public void Same_as_copied_array()"
  },
  "api/MackySoft.XPool.FactoryPool-1.html": {
    "href": "api/MackySoft.XPool.FactoryPool-1.html",
    "title": "Class FactoryPool<T> | XPool",
    "keywords": "Class FactoryPool<T> Pool that create an instance from a custom factory method. Inheritance Object PoolBase <T> FactoryPool<T> Implements IPool <T> Inherited Members PoolBase<T>.Rent() PoolBase<T>.Return(T) PoolBase<T>.ReleaseInstances(Int32) Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public sealed class FactoryPool<T> : PoolBase<T>, IPool<T>, IDisposable Type Parameters Name Description T Constructors FactoryPool(Int32, Func<T>, Action<T>, Action<T>, Action<T>) Declaration public FactoryPool(int capacity, Func<T> factory, Action<T> onRent = null, Action<T> onReturn = null, Action<T> onRelease = null) Parameters Type Name Description Int32 capacity The pool capacity. If less than or equal to 0, ArgumentOutOfRangeException will be thrown. Func <T> factory Method that create new instance. If is null, ArgumentNullException will be thrown. This method is must return not null. If returns null, throw NullReferenceException . Action <T> onRent Callback that is called when is successful. Action <T> onReturn Callback that is called when is successful. Action <T> onRelease Callback that is called when capacity is exceeded and the instance cannot be returned to the pool. Exceptions Type Condition ArgumentOutOfRangeException ArgumentNullException Methods Dispose() Declaration public void Dispose() Factory() Declaration protected override T Factory() Returns Type Description T Overrides MackySoft.XPool.ObjectModel.PoolBase<T>.Factory() OnRelease(T) Declaration protected override void OnRelease(T instance) Parameters Type Name Description T instance Overrides MackySoft.XPool.ObjectModel.PoolBase<T>.OnRelease(T) OnRent(T) Declaration protected override void OnRent(T instance) Parameters Type Name Description T instance Overrides MackySoft.XPool.ObjectModel.PoolBase<T>.OnRent(T) OnReturn(T) Declaration protected override void OnReturn(T instance) Parameters Type Name Description T instance Overrides MackySoft.XPool.ObjectModel.PoolBase<T>.OnReturn(T) Implements IPool<T>"
  },
  "api/MackySoft.XPool.html": {
    "href": "api/MackySoft.XPool.html",
    "title": "Namespace MackySoft.XPool | XPool",
    "keywords": "Namespace MackySoft.XPool Classes FactoryPool<T> Pool that create an instance from a custom factory method. PoolExtensions Structs RentInstance<T> Interfaces IPool<T> Interface provides that basic features of pool."
  },
  "api/MackySoft.XPool.IPool-1.html": {
    "href": "api/MackySoft.XPool.IPool-1.html",
    "title": "Interface IPool<T> | XPool",
    "keywords": "Interface IPool<T> Interface provides that basic features of pool. Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public interface IPool<T> Type Parameters Name Description T Type of instance to pool. Methods ReleaseInstances(Int32) Keeps the specified quantity and releases the pooled instances. Declaration void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Quantity that keep pooled instances. Rent() Return the pooled instance. If pool is empty, create new instance and returns it. Declaration T Rent() Returns Type Description T Return(T) Return instance to the pool. Declaration void Return(T instance) Parameters Type Name Description T instance"
  },
  "api/MackySoft.XPool.ObjectModel.html": {
    "href": "api/MackySoft.XPool.ObjectModel.html",
    "title": "Namespace MackySoft.XPool.ObjectModel | XPool",
    "keywords": "Namespace MackySoft.XPool.ObjectModel Classes PoolBase<T> Provides basic features of pool."
  },
  "api/MackySoft.XPool.ObjectModel.PoolBase-1.html": {
    "href": "api/MackySoft.XPool.ObjectModel.PoolBase-1.html",
    "title": "Class PoolBase<T> | XPool",
    "keywords": "Class PoolBase<T> Provides basic features of pool. Inheritance Object PoolBase<T> FactoryPool<T> Implements IPool <T> Namespace : MackySoft.XPool.ObjectModel Assembly : cs.temp.dll.dll Syntax public abstract class PoolBase<T> : IPool<T> Type Parameters Name Description T Constructors PoolBase(Int32) Initialize the pool with capacity. The inherited class must call this constructor. Declaration protected PoolBase(int capacity) Parameters Type Name Description Int32 capacity The pool capacity. If less than or equal to 0, ArgumentOutOfRangeException will be thrown. Methods Factory() Declaration protected abstract T Factory() Returns Type Description T OnRelease(T) Declaration protected abstract void OnRelease(T instance) Parameters Type Name Description T instance OnRent(T) Declaration protected abstract void OnRent(T instance) Parameters Type Name Description T instance OnReturn(T) Declaration protected abstract void OnReturn(T instance) Parameters Type Name Description T instance ReleaseInstances(Int32) Keeps the specified quantity and releases the pooled instances. Declaration public void ReleaseInstances(int keep) Parameters Type Name Description Int32 keep Quantity that keep pooled instances. If less than 0 or greater than capacity, ArgumentOutOfRangeException will be thrown. Rent() Return the pooled instance. If pool is empty, create new instance and returns it. Declaration public T Rent() Returns Type Description T Exceptions Type Condition NullReferenceException Return(T) Return instance to the pool. If the capacity is exceeded, the instance will not be returned to the pool. Declaration public void Return(T instance) Parameters Type Name Description T instance Exceptions Type Condition ArgumentNullException Implements IPool<T>"
  },
  "api/MackySoft.XPool.PoolExtensions.html": {
    "href": "api/MackySoft.XPool.PoolExtensions.html",
    "title": "Class PoolExtensions | XPool",
    "keywords": "Class PoolExtensions Inheritance Object PoolExtensions Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public static class PoolExtensions Methods Clear<T>(IPool<T>) Release the all pooled instances. Declaration public static void Clear<T>(this IPool<T> pool) Parameters Type Name Description IPool <T> pool Type Parameters Name Description T Exceptions Type Condition ArgumentNullException RentTemporary<T>(IPool<T>, out T) Temporary rent an instance from pool. By using the using statement, you can safely return instance. using (myPool.RentTemporary(out var instance)) { // Use instance... } Declaration public static RentInstance<T> RentTemporary<T>(this IPool<T> pool, out T instance) Parameters Type Name Description IPool <T> pool T instance Returns Type Description RentInstance <T> Type Parameters Name Description T Return<T>(IPool<T>, ref T) Return the instance to the pool and set reference to null. Declaration public static void Return<T>(this IPool<T> pool, ref T instance) Parameters Type Name Description IPool <T> pool T instance Type Parameters Name Description T Exceptions Type Condition ArgumentNullException"
  },
  "api/MackySoft.XPool.RentInstance-1.html": {
    "href": "api/MackySoft.XPool.RentInstance-1.html",
    "title": "Struct RentInstance<T> | XPool",
    "keywords": "Struct RentInstance<T> Namespace : MackySoft.XPool Assembly : cs.temp.dll.dll Syntax public struct RentInstance<T> : IDisposable Type Parameters Name Description T Methods Dispose() Declaration public void Dispose()"
  },
  "api/MackySoft.XPool.Tests.FactoryPoolTest.html": {
    "href": "api/MackySoft.XPool.Tests.FactoryPoolTest.html",
    "title": "Class FactoryPoolTest | XPool",
    "keywords": "Class FactoryPoolTest Inheritance Object FactoryPoolTest Namespace : MackySoft.XPool.Tests Assembly : cs.temp.dll.dll Syntax public class FactoryPoolTest Methods Not_return_instance_to_pool_if_capacity_is_exceeded() Declaration public void Not_return_instance_to_pool_if_capacity_is_exceeded() onRelease_is_called_if_capacity_is_exceeded() Declaration public void onRelease_is_called_if_capacity_is_exceeded() onRelease_is_called_when_clear_pool() Declaration public void onRelease_is_called_when_clear_pool() onRent_is_called_if_Rent_suceeded() Declaration public void onRent_is_called_if_Rent_suceeded() onReturn_is_called_if_Return_suceeded() Declaration public void onReturn_is_called_if_Return_suceeded() ReleaseInstances_is_keep_specified_quantity_and_release_instances() Declaration public void ReleaseInstances_is_keep_specified_quantity_and_release_instances() ReleaseInstances_is_release_all_instances_if_keep_is_zero() Declaration public void ReleaseInstances_is_release_all_instances_if_keep_is_zero() ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Declaration public void ReleaseInstances_throw_ArgumentOutOfRangeException_if_keep_is_less_than_zero_or_greater_than_capacity() Rent_returned_new_instance_if_first_Rent() Declaration public void Rent_returned_new_instance_if_first_Rent() Rent_returned_pooled_instance() Declaration public void Rent_returned_pooled_instance() Throw_ArgumentNullException_if_factory_is_null() Declaration public void Throw_ArgumentNullException_if_factory_is_null() Throw_ArgumentOutOfRangeException_if_capcity_less_than_or_equal_to_zero() Declaration public void Throw_ArgumentOutOfRangeException_if_capcity_less_than_or_equal_to_zero() Throw_NullReferenceException_if_factory_returned_null() Declaration public void Throw_NullReferenceException_if_factory_returned_null()"
  },
  "api/MackySoft.XPool.Tests.html": {
    "href": "api/MackySoft.XPool.Tests.html",
    "title": "Namespace MackySoft.XPool.Tests | XPool",
    "keywords": "Namespace MackySoft.XPool.Tests Classes FactoryPoolTest Unit"
  },
  "api/MackySoft.XPool.Tests.Unit.html": {
    "href": "api/MackySoft.XPool.Tests.Unit.html",
    "title": "Class Unit | XPool",
    "keywords": "Class Unit Inheritance Object Unit Namespace : MackySoft.XPool.Tests Assembly : cs.temp.dll.dll Syntax public class Unit Fields Default Declaration public static readonly Unit Default Field Value Type Description Unit"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | XPool",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [0.1.0] - 2022-XX-XX First release"
  },
  "index.html": {
    "href": "index.html",
    "title": "XPool | XPool",
    "keywords": "XPool Object pooling system To be described Why XPool ? Get Started Installation Object Pool Factory Pool Unity Object Pool GameObject Pool Component Pool Writing Custom Unity Object Pool Example: ParticleSystem Pool Collection Pool Non Allocated Collections"
  }
}